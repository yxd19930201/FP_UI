
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fp_win.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime
import hashlib
import json
import random
import re
import time
import uuid

import pymysql
import requests
from PyQt5 import QtCore, QtWidgets,QtGui
import sys
import pymssql


class Ui_Dialog(object):
    time=""
    number=""
    dic_appkey={}
    dic_syssecret={}


    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(526, 769)
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(40, 20, 451, 341))
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()

        self.tab.setObjectName("tab")
        self.formLayout = QtWidgets.QFormLayout(self.tab)
        self.formLayout.setObjectName("formLayout")
        self.pushButton = QtWidgets.QPushButton(self.tab)
        self.pushButton.setObjectName("pushButton")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.pushButton)
        self.lineEdit = QtWidgets.QLineEdit(self.tab)
        self.lineEdit.setObjectName("lineEdit")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineEdit)
        self.pushButton_2 = QtWidgets.QPushButton(self.tab)
        self.pushButton_2.setObjectName("pushButton_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.pushButton_2)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.tab)
        self.pushButton_3.setObjectName("pushButton_3")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.pushButton_3)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.lineEdit_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.tab)
        self.pushButton_4.setObjectName("pushButton_4")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.pushButton_4)
        self.lineEdit_4 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.lineEdit_4)
        self.pushButton_5 = QtWidgets.QPushButton(self.tab)
        self.pushButton_5.setObjectName("pushButton_5")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.pushButton_5)
        self.lineEdit_5 = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.lineEdit_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.tab)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.cost_float)
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.SpanningRole, self.pushButton_6)
        self.textBrowser = QtWidgets.QTextBrowser(self.tab)
        self.textBrowser.setObjectName("textBrowser")
        self.formLayout.setWidget(6, QtWidgets.QFormLayout.SpanningRole, self.textBrowser)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()

        self.tab_2.setObjectName("tab_2")
        self.pushButton_7 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_7.setGeometry(QtCore.QRect(10, 10, 75, 23))
        self.pushButton_7.setObjectName("pushButton_7")
        self.lineEdit_6 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_6.setGeometry(QtCore.QRect(90, 10, 346, 20))
        self.lineEdit_6.setObjectName("lineEdit_6")
        self.pushButton_8 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_8.setGeometry(QtCore.QRect(10, 40, 75, 23))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_9.setGeometry(QtCore.QRect(10, 70, 75, 23))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_10.setGeometry(QtCore.QRect(10, 100, 75, 23))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_11 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_11.setGeometry(QtCore.QRect(10, 130, 75, 23))
        self.pushButton_11.setObjectName("pushButton_11")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_7.setGeometry(QtCore.QRect(90, 40, 346, 20))
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.lineEdit_8 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_8.setGeometry(QtCore.QRect(90, 70, 346, 20))
        self.lineEdit_8.setObjectName("lineEdit_8")
        self.lineEdit_9 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_9.setGeometry(QtCore.QRect(90, 100, 346, 20))
        self.lineEdit_9.setObjectName("lineEdit_9")
        self.lineEdit_10 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_10.setGeometry(QtCore.QRect(90, 130, 346, 20))
        self.lineEdit_10.setObjectName("lineEdit_10")
        self.pushButton_12 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_12.setGeometry(QtCore.QRect(10, 160, 427, 23))
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_12.clicked.connect(self.face_float)
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.tab_2)
        self.textBrowser_2.setGeometry(QtCore.QRect(10, 190, 427, 121))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()

        self.tab_3.setObjectName("tab_3")
        self.pushButton_13 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_13.setGeometry(QtCore.QRect(10, 10, 75, 23))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_14 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_14.setGeometry(QtCore.QRect(10, 40, 75, 23))
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_15 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_15.setGeometry(QtCore.QRect(10, 70, 75, 23))
        self.pushButton_15.setObjectName("pushButton_15")
        self.pushButton_16 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_16.setGeometry(QtCore.QRect(10, 100, 75, 23))
        self.pushButton_16.setObjectName("pushButton_16")
        self.pushButton_17 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_17.setGeometry(QtCore.QRect(10, 130, 75, 23))
        self.pushButton_17.setObjectName("pushButton_17")
        self.pushButton_18 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_18.setGeometry(QtCore.QRect(10, 160, 75, 23))
        self.pushButton_18.setObjectName("pushButton_18")
        self.lineEdit_11 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_11.setGeometry(QtCore.QRect(90, 10, 346, 20))
        self.lineEdit_11.setObjectName("lineEdit_11")
        self.lineEdit_12 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_12.setGeometry(QtCore.QRect(90, 40, 346, 20))
        self.lineEdit_12.setObjectName("lineEdit_12")
        self.lineEdit_13 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_13.setGeometry(QtCore.QRect(90, 70, 346, 20))
        self.lineEdit_13.setObjectName("lineEdit_13")
        self.lineEdit_14 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_14.setGeometry(QtCore.QRect(90, 100, 346, 20))
        self.lineEdit_14.setObjectName("lineEdit_14")
        self.lineEdit_15 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_15.setGeometry(QtCore.QRect(90, 130, 346, 20))
        self.lineEdit_15.setObjectName("lineEdit_15")
        self.lineEdit_16 = QtWidgets.QLineEdit(self.tab_3)
        self.lineEdit_16.setGeometry(QtCore.QRect(90, 160, 346, 20))
        self.lineEdit_16.setObjectName("lineEdit_16")
        self.pushButton_19 = QtWidgets.QPushButton(self.tab_3)
        self.pushButton_19.setGeometry(QtCore.QRect(10, 190, 427, 23))
        self.pushButton_19.setObjectName("pushButton_19")
        self.pushButton_19.clicked.connect(self.cent_commission_gmv)
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser_3.setGeometry(QtCore.QRect(10, 220, 427, 91))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()

        self.tab_4.setObjectName("tab_4")
        self.pushButton_20 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_20.setGeometry(QtCore.QRect(10, 10, 75, 23))
        self.pushButton_20.setObjectName("pushButton_20")
        self.pushButton_21 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_21.setGeometry(QtCore.QRect(10, 40, 75, 23))
        self.pushButton_21.setObjectName("pushButton_21")
        self.pushButton_22 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_22.setGeometry(QtCore.QRect(10, 70, 75, 23))
        self.pushButton_22.setObjectName("pushButton_22")
        self.pushButton_23 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_23.setGeometry(QtCore.QRect(10, 100, 75, 23))
        self.pushButton_23.setObjectName("pushButton_23")
        self.pushButton_24 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_24.setGeometry(QtCore.QRect(10, 130, 75, 23))
        self.pushButton_24.setObjectName("pushButton_24")
        self.pushButton_25 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_25.setGeometry(QtCore.QRect(10, 160, 75, 23))
        self.pushButton_25.setObjectName("pushButton_25")
        self.lineEdit_17 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_17.setGeometry(QtCore.QRect(90, 10, 346, 20))
        self.lineEdit_17.setObjectName("lineEdit_17")
        self.lineEdit_18 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_18.setGeometry(QtCore.QRect(90, 40, 346, 20))
        self.lineEdit_18.setObjectName("lineEdit_18")
        self.lineEdit_19 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_19.setGeometry(QtCore.QRect(90, 70, 346, 20))
        self.lineEdit_19.setObjectName("lineEdit_19")
        self.lineEdit_20 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_20.setGeometry(QtCore.QRect(90, 100, 346, 20))
        self.lineEdit_20.setObjectName("lineEdit_20")
        self.lineEdit_21 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_21.setGeometry(QtCore.QRect(90, 130, 346, 20))
        self.lineEdit_21.setObjectName("lineEdit_21")
        self.lineEdit_22 = QtWidgets.QLineEdit(self.tab_4)
        self.lineEdit_22.setGeometry(QtCore.QRect(90, 160, 346, 20))
        self.lineEdit_22.setObjectName("lineEdit_22")
        self.pushButton_26 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_26.setGeometry(QtCore.QRect(10, 190, 427, 23))
        self.pushButton_26.setObjectName("pushButton_26")
        self.pushButton_26.clicked.connect(self.cent_commission_difference)
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.tab_4)
        self.textBrowser_4.setGeometry(QtCore.QRect(10, 220, 427, 91))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.tabWidget.addTab(self.tab_4, "")

        self.lineEdit_45 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_45.setGeometry(QtCore.QRect(150, 380, 91, 20))
        self.lineEdit_45.setObjectName("lineEdit_45")
        self.lineEdit_46 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_46.setGeometry(QtCore.QRect(150, 410, 91, 20))
        self.lineEdit_46.setObjectName("lineEdit_46")
        self.lineEdit_48 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_48.setGeometry(QtCore.QRect(150, 460, 91, 21))
        self.lineEdit_48.setObjectName("lineEdit_48")
        self.pushButton_27 = QtWidgets.QPushButton(Dialog)
        self.pushButton_27.setGeometry(QtCore.QRect(250, 380, 51, 51))
        self.pushButton_27.setObjectName("pushButton_27")
        self.pushButton_27.clicked.connect(self.merchant_addmoney)
        self.pushButton_28 = QtWidgets.QPushButton(Dialog)
        self.pushButton_28.setGeometry(QtCore.QRect(250, 460, 51, 51))
        self.pushButton_28.setObjectName("pushButton_28")
        self.pushButton_28.clicked.connect(self.get_verification_code)
        self.pushButton_29 = QtWidgets.QPushButton(Dialog)
        self.pushButton_29.setGeometry(QtCore.QRect(40, 380, 101, 23))
        self.pushButton_29.setObjectName("pushButton_29")
        self.pushButton_30 = QtWidgets.QPushButton(Dialog)
        self.pushButton_30.setGeometry(QtCore.QRect(40, 410, 101, 23))
        self.pushButton_30.setObjectName("pushButton_30")
        self.pushButton_31 = QtWidgets.QPushButton(Dialog)
        self.pushButton_31.setGeometry(QtCore.QRect(40, 460, 101, 21))
        self.pushButton_31.setObjectName("pushButton_31")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setGeometry(QtCore.QRect(150, 490, 91, 20))
        self.comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("IT")
        self.comboBox.addItem("PRE")
        self.pushButton_32 = QtWidgets.QPushButton(Dialog)
        self.pushButton_32.setGeometry(QtCore.QRect(40, 490, 101, 21))
        self.pushButton_32.setObjectName("pushButton_32")
        self.textBrowser_5 = QtWidgets.QTextBrowser(Dialog)
        self.textBrowser_5.setGeometry(QtCore.QRect(310, 380, 181, 351))
        self.textBrowser_5.setObjectName("textBrowser_5")
        # self.pushButton_33 = QtWidgets.QPushButton(Dialog)
        # self.pushButton_33.setGeometry(QtCore.QRect(50, 590, 261, 51))
        # self.pushButton_33.setObjectName("pushButton_33")
        self.pushButton_33 = QtWidgets.QPushButton(Dialog)
        self.pushButton_33.setGeometry(QtCore.QRect(40, 540, 101, 21))
        self.pushButton_33.setObjectName("pushButton_33")
        self.pushButton_34 = QtWidgets.QPushButton(Dialog)
        self.pushButton_34.setGeometry(QtCore.QRect(40, 570, 101, 21))
        self.pushButton_34.setObjectName("pushButton_34")
        self.pushButton_35 = QtWidgets.QPushButton(Dialog)
        self.pushButton_35.setGeometry(QtCore.QRect(40, 600, 101, 21))
        self.pushButton_35.setObjectName("pushButton_35")
        self.lineEdit_49 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_49.setGeometry(QtCore.QRect(150, 540, 91, 21))
        self.lineEdit_49.setObjectName("lineEdit_49")
        self.lineEdit_50 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_50.setGeometry(QtCore.QRect(150, 570, 91, 21))
        self.lineEdit_50.setObjectName("lineEdit_50")
        self.comboBox_2 = QtWidgets.QComboBox(Dialog)
        self.comboBox_2.setGeometry(QtCore.QRect(150, 600, 74, 20))
        self.comboBox_2.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem(" 直充商品")
        self.comboBox_2.addItem(" 卡密商品")
        self.pushButton_36 = QtWidgets.QPushButton(Dialog)
        self.pushButton_36.setGeometry(QtCore.QRect(250, 540, 51, 111))
        self.pushButton_36.setObjectName("pushButton_36")
        self.pushButton_36.clicked.connect(self.api_order)
        self.pushButton_37 = QtWidgets.QPushButton(Dialog)
        self.pushButton_37.setGeometry(QtCore.QRect(40, 680, 101, 21))
        self.pushButton_37.setObjectName("pushButton_37")
        self.pushButton_38 = QtWidgets.QPushButton(Dialog)
        self.pushButton_38.setGeometry(QtCore.QRect(40, 710, 101, 21))
        self.pushButton_38.setObjectName("pushButton_38")
        self.lineEdit_51 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_51.setGeometry(QtCore.QRect(150, 680, 91, 21))
        self.lineEdit_51.setObjectName("lineEdit_51")
        self.comboBox_3 = QtWidgets.QComboBox(Dialog)
        self.comboBox_3.setGeometry(QtCore.QRect(150, 710, 44, 20))
        self.comboBox_3.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("IT")
        self.comboBox_3.addItem("PRE")
        self.pushButton_39 = QtWidgets.QPushButton(Dialog)
        self.pushButton_39.setGeometry(QtCore.QRect(250, 680, 51, 51))
        self.pushButton_39.setObjectName("pushButton_39")
        self.pushButton_39.clicked.connect(self.query_order)
        self.pushButton_40 = QtWidgets.QPushButton(Dialog)
        self.pushButton_40.setGeometry(QtCore.QRect(40, 630, 101, 21))
        self.pushButton_40.setObjectName("pushButton_40")
        self.comboBox_4 = QtWidgets.QComboBox(Dialog)
        self.comboBox_4.setGeometry(QtCore.QRect(150, 630, 91, 16))
        self.comboBox_4.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "福禄伙伴便捷测试工具-v2.1"))
        self.tabWidget.setToolTip(_translate("Dialog", "<html><head/><body><p>成本上浮</p></body></html>"))
        self.pushButton.setText(_translate("Dialog", "输入成本"))
        self.pushButton_2.setText(_translate("Dialog", "上浮费率"))
        self.pushButton_3.setText(_translate("Dialog", "服务费率"))
        self.pushButton_4.setText(_translate("Dialog", "输入面值"))
        self.pushButton_5.setText(_translate("Dialog", "浮动上限"))
        self.pushButton_6.setText(_translate("Dialog", "计算"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Dialog", "成本上浮计算"))
        self.pushButton_7.setText(_translate("Dialog", "输入成本"))
        self.pushButton_8.setText(_translate("Dialog", "固定利润"))
        self.pushButton_9.setText(_translate("Dialog", "服务费率"))
        self.pushButton_10.setText(_translate("Dialog", "输入面值"))
        self.pushButton_11.setText(_translate("Dialog", "浮动上限"))
        self.pushButton_12.setText(_translate("Dialog", "计算"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Dialog", "面值上浮计算"))
        self.pushButton_13.setText(_translate("Dialog", "输入密价"))
        self.pushButton_14.setText(_translate("Dialog", "输推广价"))
        self.pushButton_15.setText(_translate("Dialog", "输成本价"))
        self.pushButton_16.setText(_translate("Dialog", "输购买数"))
        self.pushButton_17.setText(_translate("Dialog", "平台费率"))
        self.pushButton_18.setText(_translate("Dialog", "分润比例"))
        self.pushButton_19.setText(_translate("Dialog", "计算"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Dialog", "推广大使GMV分佣"))
        self.pushButton_20.setText(_translate("Dialog", "输入密价"))
        self.pushButton_21.setText(_translate("Dialog", "输推广价"))
        self.pushButton_22.setText(_translate("Dialog", "输成本价"))
        self.pushButton_23.setText(_translate("Dialog", "输购买数"))
        self.pushButton_24.setText(_translate("Dialog", "平台费率"))
        self.pushButton_25.setText(_translate("Dialog", "分润比例"))
        self.pushButton_26.setText(_translate("Dialog", "计算"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("Dialog", "推广大使差额比例分佣"))

        self.pushButton_27.setText(_translate("Dialog", "加款"))
        self.pushButton_28.setText(_translate("Dialog", "获取"))
        self.pushButton_29.setText(_translate("Dialog", "输入商户编号"))
        self.pushButton_30.setText(_translate("Dialog", "输入加款额度"))
        self.pushButton_31.setText(_translate("Dialog", "输入手机号码"))
        self.comboBox.setCurrentText(_translate("Dialog", "IT"))
        self.comboBox.setItemText(0, _translate("Dialog", " IT 测试"))
        self.comboBox.setItemText(1, _translate("Dialog", " PRE 预发布"))
        self.pushButton_32.setText(_translate("Dialog", "选择登录环境"))
        # self.pushButton_33.setText(_translate("Dialog", "IT环境一键商品主流程"))
        self.pushButton_33.setText(_translate("Dialog", "进货商编号"))
        self.pushButton_34.setText(_translate("Dialog", "FP商品编号"))
        self.pushButton_35.setText(_translate("Dialog", "FP商品类型"))
        self.comboBox_2.setCurrentText(_translate("Dialog", "直充商品"))
        self.comboBox_2.setItemText(0, _translate("Dialog", "  直充商品 "))
        self.comboBox_2.setItemText(1, _translate("Dialog", "  卡密商品 "))
        self.pushButton_36.setText(_translate("Dialog", "下单"))
        self.pushButton_37.setText(_translate("Dialog", "系统订单编号"))
        self.pushButton_38.setText(_translate("Dialog", "选择查询环境"))
        self.comboBox_3.setCurrentText(_translate("Dialog", " IT 测试"))
        self.comboBox_3.setItemText(0, _translate("Dialog", " IT 测试"))
        self.comboBox_3.setItemText(1, _translate("Dialog", " PRE 预发布"))
        self.pushButton_39.setText(_translate("Dialog", "查询"))
        self.pushButton_40.setText(_translate("Dialog", "FP下单环境"))
        self.comboBox_4.setCurrentText(_translate("Dialog", "IT"))
        self.comboBox_4.setItemText(0, _translate("Dialog", "IT 测试环境"))
        self.comboBox_4.setItemText(1, _translate("Dialog", "PRE徐康专用"))
        self.comboBox_4.setItemText(2, _translate("Dialog", "PRE刘青专用"))


        # 获取成本上浮参数值

    def cost_float(self):
        cost_price = self.dual_num(self.lineEdit.text())
        float_rate = self.dual_num(self.lineEdit_2.text())
        float_rate = float(float_rate / 100)
        server_rate = self.dual_num(self.lineEdit_3.text())
        server_rate = float(server_rate / 100)
        face_value = self.dual_num(self.lineEdit_4.text())
        float_max = self.dual_num(self.lineEdit_5.text())
        float_max = float(float_max / 100)

        face_rate_value = face_value * float_max
        final_price = cost_price * (1 + float_rate) / (1 - server_rate)

        self.textBrowser.append("获取最终密价：{}".format(final_price))
        self.textBrowser.append("面值上浮价格：{}".format(face_rate_value))
        try:
            if final_price <= face_rate_value:
                self.textBrowser.append("密价小于上浮价格，按密价上浮，上浮价格：{}".format(final_price))
            else:
                self.textBrowser.append("密价大于上浮价格，按浮动上限，上浮价格：{}".format(face_rate_value))
        finally:
            self.textBrowser.append("*********************************************")

        # 获得面值上浮参数值

    def face_float(self):
        cost_price_1 = self.dual_num(self.lineEdit_6.text())
        markup = self.dual_num(self.lineEdit_7.text())
        server_rate_2 = self.dual_num(self.lineEdit_8.text())
        server_rate_2 = float(server_rate_2 / 100)
        face_value = self.dual_num(self.lineEdit_9.text())
        float_max_2 = self.dual_num(self.lineEdit_10.text())
        float_max_2 = float(float_max_2 / 100)

        final_price1 = (cost_price_1 + markup) / (1 - server_rate_2)
        face_rate_value2 = (face_value * float_max_2)

        self.textBrowser_2.append("获取最终密价：{}".format(final_price1))
        self.textBrowser_2.append("面值上浮价格：{}".format(face_rate_value2))

        try:
            if final_price1 <= face_rate_value2:
                self.textBrowser_2.append("密价小于上浮价格，按密价上浮，上浮价格：{}".format(final_price1))
            else:
                self.textBrowser_2.append("密价大于上浮价格，按浮动上限，上浮价格：{}".format(face_rate_value2))
        finally:
            self.textBrowser_2.append("*********************************************")

        # 获得推广大使GMV分佣

    def cent_commission_gmv(self):
        try:
            close_price = self.dual_num(self.lineEdit_11.text())
            promotion_price = self.dual_num(self.lineEdit_12.text())
            cost_price_3 = self.dual_num(self.lineEdit_13.text())
            purchase_number = self.dual_num(self.lineEdit_14.text())
            platform_rate = self.dual_num(self.lineEdit_15.text())
            platform_rate = (platform_rate / 100)
            allocation_ratio = self.dual_num(self.lineEdit_16.text())
            allocation_ratio = (allocation_ratio / 100)

            # 推广大使分佣
            promotion_ambassador = close_price * purchase_number * allocation_ratio

            # 福禄伙伴利润
            pt = purchase_number * close_price * platform_rate
            fp = purchase_number * close_price * allocation_ratio
            fp_profit = close_price * purchase_number - cost_price_3 * purchase_number - pt - fp

            self.textBrowser_3.append("推广大使分佣金额：{}".format(promotion_ambassador))
            self.textBrowser_3.append("福禄伙伴利润利润：{}".format(fp_profit))

        finally:
            self.textBrowser_3.append("*********************************************")

        # 获得推广大使差额分佣

    def cent_commission_difference(self):
        try:
            close_price_4 = self.dual_num(self.lineEdit_17.text())
            promotion_price_4 = self.dual_num(self.lineEdit_18.text())
            cost_price_4 = self.dual_num(self.lineEdit_19.text())
            purchase_number_4 = self.dual_num(self.lineEdit_20.text())
            platform_rate_4 = self.dual_num(self.lineEdit_21.text())
            platform_rate_4 = (platform_rate_4 / 100)
            allocation_ratio_4 = self.dual_num(self.lineEdit_22.text())
            allocation_ratio_4 = (allocation_ratio_4 / 100)

            # 推广大使分佣
            promotion_ambassador1 = (close_price_4 - promotion_price_4) * allocation_ratio_4 * purchase_number_4

            # 福禄伙伴利润
            pt1 = close_price_4 * purchase_number_4 * platform_rate_4
            fp1 = (close_price_4 - promotion_price_4) * allocation_ratio_4 * purchase_number_4
            fp_profit1 = close_price_4 * purchase_number_4 - cost_price_4 * purchase_number_4 - pt1 - fp1

            self.textBrowser_4.append("推广大使分佣金额：{}".format(promotion_ambassador1))
            self.textBrowser_4.append("福禄伙伴利润利润：{}".format(fp_profit1))
        finally:
            self.textBrowser_4.append("*********************************************")




    # 加款token
    def get_token(self):
        path = 'http://it.passport.suuyuu.cn/OAuth/Token'
        data = {"grant_type": "client_credentials",
                "client_id": "10000072",
                "client_secret": "5786406662bf4774a9b073364b828ee7"}
        # data = 'grant_type=client_credentials&client_id=10000072&client_secret=5786406662bf4774a9b073364b828ee7'
        head = {"Content-Type": "application/x-www-form-urlencoded"}

        add_money_token = requests.post(path, data=data, headers=head)
        t = add_money_token.json()['access_token']
        return t


    def merchant_addmoney(self):

       try:
            membercode=self.lineEdit_45.text()
            money=int(self.lineEdit_46.text())

            # 连接数据库
            dic_id = {}
            dic_FinOpenId = {}
            db = pymssql.connect(server='118.31.73.208',
                                 user='Soouu_test_sql',
                                 password='soouuapi123456',
                                 database='soouu',
                                 port='55433')
            # 获取游标
            cur = db.cursor(as_dict=True)
            if cur:
                print("链接成功")
            sql = "SELECT Id,FinOpenId FROM Member WHERE MemberCode={}".format(membercode)
            cur.execute(sql)
            res = cur.fetchall()
            res = [item[key] for item in res for key in item]
            id = res[0]
            FinOpenId = res[1]
            dic_id.setdefault('id', id)
            dic_FinOpenId.setdefault('FinOpenId', FinOpenId)


            path = 'http://it.finance.api-admin.suuyuu.cn/api/Balance/charge'
            data = {"merchantId": "{}".format(dic_id.get("id")),
                      "accountId": "{}".format(dic_FinOpenId.get("FinOpenId")),
                      "amount": money,
                      "bizId": "{}".format(uuid.uuid1()),
                      "bizType": "手工加款",
                      "bizClient": "",
                      "remark": ""}
            head = {'authorization': 'Bearer {}'.format(self.get_token()),
                    'Content-Type': 'application/json'}
            addmoney=requests.post(path,data=json.dumps(data),headers=head)
            print(head)
            print(data)
            print(addmoney)
            print(addmoney.headers)
            residue=addmoney.json()['data']['currentBalance']

            self.textBrowser_5.append("剩余额度：{}".format(residue))
       except:
            self.textBrowser_5.append("请输入正确进货商编号及金额")
       finally:
            self.textBrowser_5.append("********************")



    def get_verification_code(self):
        try:
            phone = int(self.lineEdit_48.text())
            path = "https://apollo-api-admin.fulu.com/zues/api/getSmsCode"
            if self.comboBox.currentText()==" IT 测试":
                data ={"smsEnv":"beta","smsTel":"{}".format(phone)}
            if self.comboBox.currentText()==" PRE 预发布":
                data = {"smsEnv": "pre", "smsTel": "{}".format(phone)}
            head ={"Content-Type":"application/json"}
            verification_code=requests.post(path,data=json.dumps(data),headers=head,verify=False)
            print(verification_code.text)
            data=verification_code.json()["data"]
            self.textBrowser_5.append(data)
        except:
            self.textBrowser_5.append("请输入正确手机号")
        finally:
            self.textBrowser_5.append("********************")


    def get_purmember(self):
        purmembercode=self.lineEdit_49.text()
        if self.comboBox_4.currentText()=="PRE徐康专用":
            purmembercode='9796681'
        if self.comboBox_4.currentText()=="PRE刘青专用":
            purmembercode='9366304'
        db = pymysql.connect(host='47.99.103.244',
                                port=3306,
                                user='root',
                                password='Fulu2019',
                                database='apibusiness')
        print(db)
        # 获取游标
        cur = db.cursor(cursor=pymysql.cursors.DictCursor)
        if cur:
            print("链接成功")
        sql = f'SELECT app_key,sys_secret from sys_config WHERE member_code="{purmembercode}"'
        print(sql)
        cur.execute(sql)
        res = cur.fetchall()
        res = [item[key] for item in res for key in item]
        app_key = res[0]
        sys_secret = res[1]
        cur.close()
        self.dic_appkey.setdefault("app_key",app_key)
        self.dic_syssecret.setdefault("sys_secret",sys_secret)



    # MD5加密
    def order_md5(self):
        self.get_purmember()
        appkey=self.dic_appkey.get("app_key")
        syssecret=self.dic_syssecret.get("sys_secret")
        print("order_md5查看app_key:{}".format(appkey))
        purproductid=int(self.lineEdit_50.text())
        if self.comboBox_2.currentText() == "  直充商品 ":
            method = "fulu.order.direct.add"
            biz_content = "{\"customer_order_no\":\"%s\",\"product_id\":%s,\"buy_num\":1,\"charge_account\":\"otest888888\",\"charge_ip\":\"\",\"charge_password\":\"\",\"charge_game_name\":\"\",\"charge_game_role\":\"\",\"charge_game_region\":\"\",\"charge_game_srv\":\"\",\"charge_type\":\"\",\"contact_tel\":\"\",\"contact_qq\":\"\",\"customer_price\":\"130.00\",\"shop_type\":\"\"}" % (
            self.number, purproductid)

        if self.comboBox_2.currentText()== "  卡密商品 ":
            method = "fulu.order.card.add"
            biz_content = "{\"customer_order_no\":\"%s\",\"product_id\":%s,\"buy_num\":2,\"customer_price\":\"1.00\",\"shop_type\":\"\"}"%(self.number, purproductid)
        data={
                "app_key": "{}".format(appkey),
                # "method": "fulu.order.direct.add",
                "method":"{}".format(method),
                "timestamp": "{}".format(self.time),
                "version": "2.0",
                "format": "json",
                "charset": "utf-8",
                "sign_type": "md5",
                "app_auth_token": "",
                # "biz_content": "{\"customer_order_no\":\"%s\",\"product_id\":%s,\"buy_num\":1,\"charge_account\":\"otest888888\",\"charge_ip\":\"\",\"charge_password\":\"\",\"charge_game_name\":\"\",\"charge_game_role\":\"\",\"charge_game_region\":\"\",\"charge_game_srv\":\"\",\"charge_type\":\"\",\"contact_tel\":\"\",\"contact_qq\":\"\",\"customer_price\":\"130.00\",\"shop_type\":\"\"}"%(self.number,purproductid)
                "biz_content":"{}".format(biz_content)
            }

        # 将字典数据序列化
        jsondata = json.dumps(data, separators=(',', ':'))
        print('将字典数据json序列化:{}'.format(jsondata))

        # Json字符串转化为字符数组
        datalist = list(jsondata)
        print('son字符串转化为字符数组:{}'.format(datalist))

        # 进行Array.Sort()排序
        datalist.sort()
        print('排序后的数据:{}'.format(datalist))

        # 将字符串遍历，转化为字符串string
        s = ''.join(datalist)
        print('转化为字符串string:{}'.format(s))

        # 拼接应用秘钥
        joindata = s + '{}'.format(syssecret)
        print('查看拼接数据：{}'.format(joindata))

        # MD5加密
        pwd = hashlib.md5(bytes(joindata, encoding='utf-8'))
        pwd = pwd.hexdigest()
        print(pwd)
        return pwd



    def api_order(self):
        self.dic_appkey = {}
        self.dic_syssecret = {}
        self.number = int(random.randint(1, 9999999999999))
        self.time=time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))

        try:
            self.get_purmember()
            purproductid=int(self.lineEdit_50.text())
            appkey=self.dic_appkey.get("app_key")
            print("api_order查看app_key:{}".format(appkey))
            exceptname=self.comboBox_4.currentText()
            if exceptname=="IT 测试环境":
                path = 'http://it.openapi.fulu.com/api/getway'
            else:
                path = 'http://pre.openapi.fulu.com/api/getway'
            if self.comboBox_2.currentText() == "  直充商品 ":
                method="fulu.order.direct.add"
                biz_content= "{\"customer_order_no\":\"%s\",\"product_id\":%s,\"buy_num\":1,\"charge_account\":\"otest888888\",\"charge_ip\":\"\",\"charge_password\":\"\",\"charge_game_name\":\"\",\"charge_game_role\":\"\",\"charge_game_region\":\"\",\"charge_game_srv\":\"\",\"charge_type\":\"\",\"contact_tel\":\"\",\"contact_qq\":\"\",\"customer_price\":\"130.00\",\"shop_type\":\"\"}"%(self.number,purproductid)

            if self.comboBox_2.currentText() == "  卡密商品 ":
                method = "fulu.order.card.add"
                biz_content = "{\"customer_order_no\":\"%s\",\"product_id\":%s,\"buy_num\":2,\"customer_price\":\"1.00\",\"shop_type\":\"\"}" % (
                self.number, purproductid)
            data = {
                    "app_key": "{}".format(self.dic_appkey.get("app_key")),
                    "method":"{}".format(method),
                    "timestamp": "{}".format(self.time),
                    "version": "2.0",
                    "format": "json",
                    "charset": "utf-8",
                    "sign_type": "md5",
                    "sign": "{}".format(self.order_md5()),
                    "app_auth_token": "",
                    "biz_content":"{}".format(biz_content)
                }
            head = {'Content-Type': 'application/json'}
            product_order = requests.post(path, data=json.dumps(data), headers=head)
            order_text=product_order.text
            message = product_order.json()["message"]
            if message=="商户余额不足":
                moneymessage="进货商余额不足"
                print("余额结果：{}".format(moneymessage))
                self.textBrowser_5.append("{}".format(message))
            if message=="商品类型错误":
                productmessage="商品类型错误"
                self.textBrowser_5.append("{}".format(productmessage))
            print(order_text)
            r1 = '\\\\"order_id\\\\":\\\\"([0-9]+)\\\\",'
            r2 = '\\\\"customer_order_no\\\\":\\\\"([0-9]+)\\\\",'
            order_id = re.findall(r1, order_text)
            customer_order_no=re.findall(r2,order_text)[0]
            if len(order_id)>0:
                order_id = order_id[0]
                print(order_id[0])
            else:
                print("未查询到订单！")
            print("查看主订单{}".format(order_id))
            print("查看客户订单{}".format(customer_order_no))
            self.textBrowser_5.append("系统订单：{}".format(order_id))
            self.textBrowser_5.append("客户订单：{}".format(customer_order_no))
        except Exception as e:
            print(e)
            self.textBrowser_5.append("请输入正确参数")
        finally:
            self.textBrowser_5.append("********************")

    # 获取运营后台token
    # it:10000196:280881fc4d17469585bb1a1bd32432d6
    # pre：10000196：8d206eedbd974fe193819d98c1761694
    def get_yunytoken(self):
        exprct=self.comboBox_3.currentText()
        print(exprct)
        if exprct==" IT 测试":
            yypath="http://it.passport.suuyuu.cn/oauth/token"
            yydata = {"grant_type": "password",
                    "client_id": "10000196",
                    "client_secret": "280881fc4d17469585bb1a1bd32432d6",
                    "username": "15926320810",
                    "password": "weihengyi" }
        if exprct==" PRE 预发布":
            yypath = "http://pre.passport.suuyuu.cn/oauth/token"
            yydata = {"grant_type": "password",
                    "client_id": "10000196",
                    "client_secret": "8d206eedbd974fe193819d98c1761694",
                    "username":"15926320810",
                    "password":"weihengyi"}

        head = {"Content-Type": "application/x-www-form-urlencoded"}
        print("查看传参：{}".format(yydata))
        add_money_token = requests.post(yypath, data=yydata, headers=head)
        print("查看返回：{}".format(add_money_token.headers))
        print(add_money_token.text)
        t = add_money_token.json()['access_token']
        return t


    def query_order(self):
        # 61 失败
        # 51 成功
        # 41 充值中
        try:
            orderid=self.lineEdit_51.text()
            if orderid=='':
                self.textBrowser_5.append("请输入系统订单")
                exit()
            environment=self.comboBox_3.currentText()
            self.time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))
            self.lowtime = (datetime.datetime.now() - datetime.timedelta(days=30)).strftime('%Y-%m-%d %H:%M:%S')
            if environment==" IT 测试":
                path="http://sup-fpoperation-business.beta.k8s.suuyuu.cn/api/OrderManage/GetOrderListFinish"
            if environment==" PRE 预发布":
                path = "http://sup-fpoperation-business.staging.k8s.suuyuu.cn/api/OrderManage/GetOrderListFinish"
            data={"pageSize":10,"pageIndex":1,"id":"{}".format(orderid),"memberName":"","memberCode":"","productId":"","productName":"","customerOrderNo":"","orderType":"","orderBusinessType":"","orderOuterStatusListStr":"41,51,61","clientId":"","chargeAccount":"","batchNumber":"","invoiceType":"","fpMemberId":"","chargeSpeed":"","bizType":"","paymentMethod":"","beginFinishTime":"{}".format(self.lowtime),"endFinishTime":"{}".format(self.time)}
            head={'Content-Type': 'application/json',
                  'Authorization':'Bearer {}'.format(self.get_yunytoken())}
            query_order_text=requests.post(path,data=json.dumps(data),headers=head)
            print(data)
            print(query_order_text.headers)
            print("查询订单：{}".format(query_order_text.text))
            # 获取系统订单
            order_id=query_order_text.json()["data"]["list"][0]["id"]
            self.textBrowser_5.append("系统订单：{}".format(order_id))
            # 获取订单状态
            orderOuterStatus = query_order_text.json()["data"]["list"][0]["orderOuterStatus"]
            if orderOuterStatus==61:
                self.textBrowser_5.append("订单状态：充值失败")
            elif orderOuterStatus==51:
                self.textBrowser_5.append("订单状态：充值成功")
            # 获取客户订单
            order_no=query_order_text.json()["data"]["list"][0]["customerOrderNo"]
            self.textBrowser_5.append("客户订单：{}".format(order_no))
            # 获取商品编号
            product_no = query_order_text.json()["data"]["list"][0]["productId"]
            self.textBrowser_5.append("FP商品编号：{}".format(product_no))
            # 获得商品价格
            price_valus = query_order_text.json()["data"]["list"][0]["price"]
            self.textBrowser_5.append("FP商品价格：{}".format(price_valus))
            # 获取供货商品
            supProductId = query_order_text.json()["data"]["list"][0]["supProductId"]
            self.textBrowser_5.append("供货商品:{}".format(supProductId))
            # 获取FP商户
            fpmembername=query_order_text.json()["data"]["list"][0]["fpMemberName"]
            self.textBrowser_5.append("FP商户:{}".format(fpmembername))
            # 获取供货商户
            supMemberName = query_order_text.json()["data"]["list"][0]["supMemberName"]
            self.textBrowser_5.append("供货商户:{}".format(supMemberName))
            # 获取服务费率
            serviceTariffing=query_order_text.json()["data"]["list"][0]["serviceTariffing"]
            self.textBrowser_5.append("服务费率:{}".format(serviceTariffing))
        except:
            self.textBrowser_5.append("获取订单失败，请检查数据！")
        finally:
            self.textBrowser_5.append("********************")

















    def dual_num(self, str):
            try:
                num = float(str)
            except Exception as e:
                num = 0
            return num


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QWidget()
    ui = Ui_Dialog()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    Ui_Dialog().query_order()







